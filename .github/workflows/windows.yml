name: Windows (VS 2019, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
  merge_group:
  push:
    branches:
      - master
      - 'releases/**'
concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-windows
  cancel-in-progress: true

env:
  PIP_CACHE_PATH: /mount/caches/pip/win
  PYTHON_VERSION: '3.11'

permissions: read-all

jobs:
  Smart_CI:
    runs-on: ubuntu-latest
    outputs:
      affected_components: "${{ steps.smart_ci.outputs.affected_components }}"
      skip_workflow: "${{ steps.smart_ci.outputs.skip_workflow }}"
    steps:
      - name: checkout action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: .github/actions/smart-ci

      - name: Get affected components
        id: smart_ci
        uses: ./.github/actions/smart-ci
        with:
          repository: ${{ github.repository }}
          pr: ${{ github.event.number }}
          commit_sha: ${{ github.sha }}
          ref_name: ${{ github.ref_name }}
          component_pattern: "category: (.*)"
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          skip_when_only_listed_labels_set: 'docs'
          skip_when_only_listed_files_changed: '*.md,*.rst,*.png,*.jpg,*.svg,*/layer_tests_summary/*,*/conformance/*'

  Build:
    needs: Smart_CI
    timeout-minutes: 180
    defaults:
      run:
        shell: pwsh
    runs-on: aks-win-16-cores-32gb
    env:
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      CCACHE_REMOTE_DIR: "C:\\mount\\caches\\ccache\\windows2022_x86_64\\${{ github.base_ref || github.ref_name }}"
      CCACHE_DIR: ${{ github.workspace }}\\ccache
      CCACHE_MAXSIZE: 3G
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      OPENVINO_CONTRIB_REPO: "${{ github.workspace }}\\openvino_contrib"
      INSTALL_DIR: "${{ github.workspace }}\\openvino_install"
      INSTALL_DIR_JS: "${{ github.workspace }}\\openvino_install\\js"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\tests_install"
      BUILD_DIR: "${{ github.workspace }}\\openvino_build"
      ARTIFACTS_SHARE: "C:\\mount\\build-artifacts"
      MANIFEST_PATH: "${{ github.workspace }}\\manifest.yml"
      PRODUCT_TYPE: 'public_windows_vs2019_release'
      # TODO: specify version of compiler here
    if: ${{ !needs.smart_ci.outputs.skip_workflow && github.event_name != 'merge_group' }}

    steps:
      - name: Clone OpenVINO
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          path: 'openvino'
          submodules: 'true'

      - name: Clone OpenVINO Contrib
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          repository: 'openvinotoolkit/openvino_contrib'
          path: 'openvino_contrib'
          ref: 'master'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./openvino/.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          pip-cache-path: ${{ env.PIP_CACHE_PATH }}
          should-setup-pip-paths: 'true'
          self-hosted-runner: 'true'
          show-cache-info: 'true'

      - name: Generate product manifest and set CI_BUILD_NUMBER & CI_BUILD_DEV_TAG
        id: create_manifest
        uses: ./openvino/.github/actions/create_manifest
        with:
          repos: |
            ${{ env.OPENVINO_REPO }}
            ${{ env.OPENVINO_CONTRIB_REPO }}
          product_type: ${{ env.PRODUCT_TYPE }}
          target_arch: 'intel64'
          build_type: 'release'
          save_to: ${{ env.MANIFEST_PATH }}

      #
      # Print system info
      #

      - name: System info
        uses: ./openvino/.github/actions/system_info

      #
      # Dependencies
      #

      - name: Install python dependencies
        run: |
          # For Python API: build and wheel packaging
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/bindings/python/wheel/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${{ env.OPENVINO_REPO }}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow/tests/requirements.txt

          # For running TensorFlow Lite frontend unit tests
          python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/tensorflow_lite/tests/requirements.txt

          # Disabled because of CVS-95904
          # For running Paddle frontend unit tests
          # python3 -m pip install -r ${{ env.OPENVINO_REPO }}/src/frontends/paddle/tests/requirements.txt

          # For getting rid of SSL issues during model downloading for unit tests
          python3 -m pip install certifi

      - name: Download and install ccache
        run: |
          Invoke-WebRequest -Uri 'https://github.com/ccache/ccache/releases/download/v4.9.1/ccache-4.9.1-windows-x86_64.zip' -OutFile 'ccache.zip'
          Expand-Archive -Path 'ccache.zip' -DestinationPath 'C:\temp\ccache'
          Move-Item -Path 'C:\temp\ccache\*' -Destination 'C:\ccache'
          Add-Content -Path $env:GITHUB_PATH -Value "C:\ccache"

      - name: Install build dependencies
        run: |
          Invoke-WebRequest https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip -OutFile ninja-win.zip -MaximumRetryCount 10
          Expand-Archive -Force ninja-win.zip
          # Add it to the GitHub Path so it would be available in the subsequent steps
          Add-Content -Path $env:GITHUB_PATH -Value "${{ github.workspace }}/ninja-win"

      #
      # Build
      #

      - name: Setup ccache
        uses: ./openvino/.github/actions/cache
        with:
          save-always: ${{ github.event_name == 'push' && 'true' || 'false' }}
          cleanup-always: ${{ github.event_name == 'push' && 'true' || 'false' }}
          cache-path: ${{ env.CCACHE_REMOTE_DIR }}
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ runner.arch }}-ccache-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-ccache

      - name: Configure Developer Command Prompt for Microsoft Visual C++
        uses: ilammy/msvc-dev-cmd@0b201ec74fa43914dc39ae48a89fd1d8cb592756 # v1.13.0
        with:
          toolset: 14.40

      - name: Set SSL_CERT_FILE for model downloading for unit tests
        run: echo SSL_CERT_FILE=$(python3 -m certifi) >> $env:GITHUB_ENV

      - name: CMake configure
        run: |
          cmake -G "${{ env.CMAKE_GENERATOR }}" `
            -DENABLE_CPPLINT=OFF `
            -DBUILD_SHARED_LIBS=ON `
            -DENABLE_TESTS=ON `
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON `
            -DENABLE_STRICT_DEPENDENCIES=OFF `
            -DENABLE_PYTHON=ON `
            -DCMAKE_DISABLE_FIND_PACKAGE_PkgConfig=ON `
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" `
            -DOPENVINO_EXTRA_MODULES="${{ env.OPENVINO_CONTRIB_REPO }}/modules/custom_operations;${{ env.OPENVINO_CONTRIB_REPO }}/modules/java_api" `
            -S ${{ env.OPENVINO_REPO }} `
            -B ${{ env.BUILD_DIR }}

      - name: Clean ccache stats
        run: '& ccache --zero-stats'

      - name: Cmake build - OpenVINO
        run: cmake --build ${{ env.BUILD_DIR }} --parallel --config ${{ env.CMAKE_BUILD_TYPE }} --verbose

      - name: Show ccache stats
        run: '& ccache --show-stats'

      - name: Cmake install - OpenVINO
        run: |
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_TEST_DIR }} -DCOMPONENT=tests -P ${{ env.BUILD_DIR }}/cmake_install.cmake
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCOMPONENT=python_wheels -P ${{ env.BUILD_DIR }}/cmake_install.cmake

      - name: Pack Artifacts
        run: |
          $file=Get-ChildItem -Path "${{ env.INSTALL_DIR }}"
          $compress = @{
            Path = $file
            CompressionLevel = "Optimal"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_package.zip"
          }
          Compress-Archive @compress

          $file=Get-ChildItem -Path "${{ env.INSTALL_TEST_DIR }}"
          $compress = @{
            Path = $file
            CompressionLevel = "Optimal"
            DestinationPath = "${{ env.BUILD_DIR }}/openvino_tests.zip"
          }
          Compress-Archive @compress

      - name: CMake configure, build and install - OpenVINO JS API
        if: fromJSON(needs.smart_ci.outputs.affected_components).JS_API
        run: |
          cmake -DCPACK_GENERATOR=NPM -DENABLE_SYSTEM_TBB=OFF -UTBB* -S ${{ env.OPENVINO_REPO }} -B ${{ env.BUILD_DIR }}
          cmake --build ${{ env.BUILD_DIR }} --parallel
          cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR_JS }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake

      #
      # Upload build artifacts and logs
      #

      - name: Upload openvino package
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.zip
          if-no-files-found: 'error'

      - name: Upload openvino tests package
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.zip
          if-no-files-found: 'error'

      - name: Upload openvino js package
        if: fromJSON(needs.smart_ci.outputs.affected_components).JS_API
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        with:
          name: openvino_js_package
          path: ${{ env.INSTALL_DIR_JS }}
          if-no-files-found: 'error'

      - name: Store artifacts to a shared drive
        id: store_artifacts
        if: ${{ always() }}
        uses: ./openvino/.github/actions/store_artifacts
        with:
          artifacts: |
            ${{ env.BUILD_DIR }}/openvino_package.zip
            ${{ env.BUILD_DIR }}/openvino_tests.zip
            ${{ env.MANIFEST_PATH }}
          storage_dir: ${{ env.PRODUCT_TYPE }}
          storage_root: ${{ env.ARTIFACTS_SHARE }}

  Samples:
    needs: [ Build, Smart_CI ]
    if: fromJSON(needs.smart_ci.outputs.affected_components).samples
    timeout-minutes: 20
    defaults:
      run:
        shell: pwsh
    runs-on: aks-win-4-cores-8gb
    env:
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      SAMPLES_INSTALL_DIR: "${{ github.workspace }}\\install\\samples"
      BUILD_DIR: "${{ github.workspace }}\\build"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: Fetch setup_python action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'openvino'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./openvino/.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          should-setup-pip-paths: 'false'
          self-hosted-runner: 'true'

      # Test with the short names of the arguments
      - name: Build cpp samples
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples.ps1 -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/cpp_samples
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      # Test with the full names of the arguments
      - name: Build c samples
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples.ps1 -InstallDirectory ${{ env.INSTALL_DIR }} -BuildDirectory ${{ env.BUILD_DIR }}/c_samples

      - name: Samples tests
        run: |
          # Install Python benchmark_app by installing openvino-*.whl
          $ovCoreWheelPath=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tools" -Filter openvino-*.whl | % { $_.FullName }
          python3 -m pip install --ignore-installed PyYAML -r ${{ env.INSTALL_TEST_DIR }}/smoke_tests/requirements.txt "$ovCoreWheelPath"
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          $Env:PYTHONCOERCECLOCALE="warn"
          python3 -bb -W error -X dev -X warn_default_encoding -m pytest ${{ env.INSTALL_TEST_DIR }}/smoke_tests --numprocesses auto
        env:
          IE_APP_PATH: ${{ env.INSTALL_DIR }}/samples_bin
          IE_APP_PYTHON_PATH: ${{ env.INSTALL_DIR }}/samples/python
          SHARE: ${{ env.INSTALL_TEST_DIR }}/smoke_tests/samples_smoke_tests_data
          WORKSPACE: ${{ env.INSTALL_DIR }}

      # Test .bat scripts for samples building
      - name: Build cpp samples (bat)
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples_msvc.bat -i ${{ env.INSTALL_DIR }}/samples_bat -b ${{ env.BUILD_DIR }}/cpp_samples_bat
        env:
          CMAKE_COMPILE_WARNING_AS_ERROR: 'ON'

      - name: Build c samples (bat)
        run: |
          & ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples_msvc.bat -i ${{ env.INSTALL_DIR }}/samples_bat -b ${{ env.BUILD_DIR }}/c_samples_bat

  JS_API:
    name: JS API
    needs: [ Build, Smart_CI ]
    defaults:
      run:
        shell: pwsh
    runs-on: 'aks-win-4-cores-8gb'
    env:
      OPENVINO_JS_DIR: "${{ github.workspace }}\\openvino\\src\\bindings\\js"
      OPENVINO_JS_LIBS_DIR: "${{ github.workspace }}\\openvino\\src\\bindings\\js\\node\\bin"
      NODE_VERSION: 21
    if: fromJSON(needs.smart_ci.outputs.affected_components).JS_API

    steps:
      - name: Fetch OpenVINO JS sources
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            src/bindings/js
          path: 'openvino'

      - name: Download OpenVINO js package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_js_package
          path: ${{ env.OPENVINO_JS_LIBS_DIR }}

      - name: Setup Node ${{ env.NODE_VERSION }}
        uses: actions/setup-node@1e60f620b9541d16bece96c5465dc8ee9832be0b # v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure OpenVINO JS API
        working-directory: ${{ env.OPENVINO_JS_DIR }}/node
        run: npm i

      - name: Test OpenVINO JS API
        working-directory: ${{ env.OPENVINO_JS_DIR }}/node
        run: npm test

      - name: Test OpenVINO JS API (cmd)
        shell: cmd
        working-directory: ${{ env.OPENVINO_JS_DIR }}/node
        run: call npm test

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2

      - name: E2E of openvino-node package
        working-directory: ${{ env.OPENVINO_JS_DIR }}/node
        run: npm run test:e2e

      - name: E2E of openvino-node package (cmd)
        shell: cmd
        working-directory: ${{ env.OPENVINO_JS_DIR }}/node
        run: call npm run test:e2e

      - name: Create package dir
        working-directory: ${{ env.OPENVINO_JS_DIR }}
        run: mkdir project-uses-openvino-node
      - name: Test installation of openvino-node package
        working-directory: ${{ env.OPENVINO_JS_DIR }}/project-uses-openvino-node
        run: |
          npm i openvino-node
          node -e "const { addon: ov } = require('openvino-node'); console.log(ov);"

  Openvino_tokenizers:
    name: OpenVINO tokenizers extension
    needs: [ Build, Smart_CI ]
    uses: ./.github/workflows/job_tokenizers.yml
    with:
      runner: 'aks-win-4-cores-8gb'
      shell: pwsh
      affected-components: ${{ needs.smart_ci.outputs.affected_components }}
    if: fromJSON(needs.smart_ci.outputs.affected_components).TOKENIZERS

  Python_Unit_Tests:
    name: Python unit tests
    needs: [ Build, Smart_CI ]
    timeout-minutes: 75
    defaults:
      run:
        shell: pwsh
    runs-on: aks-win-8-cores-16gb
    env:
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      LAYER_TESTS_INSTALL_DIR: "${{ github.workspace }}\\install\\tests\\layer_tests"
      PYTHON_STATIC_ARGS: -m "not dynamic_library and not template_plugin"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: Fetch setup_python action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'openvino'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./openvino/.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          pip-cache-path: ${{ env.PIP_CACHE_PATH }}
          should-setup-pip-paths: 'false'
          self-hosted-runner: 'true'

      - name: Install OpenVINO Python wheels
        run: |
          # Find and install the core OV wheel
          $ovCoreWheelPath=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tools" -Filter openvino-*.whl | % { $_.FullName }
          python3 -m pip install "$ovCoreWheelPath"

          # Find and install the dev OV wheel
          $ovDevWheelPath=Get-ChildItem -Path "${{ env.INSTALL_DIR }}\tools" -Filter openvino_dev*.whl | % { $_.FullName }
          python3 -m pip install "$ovDevWheelPath[mxnet,caffe,kaldi,onnx,tensorflow2,pytorch]"

      - name: Install Python API tests dependencies
        run: |
          # To enable pytest parallel features
          python3 -m pip install pytest-xdist[psutil]

          # For torchvision to OpenVINO preprocessing converter
          python3 -m pip install -r ${{ env.INSTALL_TEST_DIR }}/python/preprocess/torchvision/requirements.txt

          # TODO: replace with Python API tests requirements
          python3 -m pip install -r ${{ env.INSTALL_TEST_DIR }}/mo/requirements_dev.txt

          # For getting rid of SSL issues during model downloading for unit tests
          python3 -m pip install certifi

      - name: Set SSL_CERT_FILE for model downloading for unit tests
        run: echo SSL_CERT_FILE=$(python3 -m certifi) >> $env:GITHUB_ENV

      - name: Python API Tests
        #if: fromJSON(needs.smart_ci.outputs.affected_components).Python_API.test # Ticket: 127101
        shell: cmd
        run: |
          set PYTHONPATH=${{ env.LAYER_TESTS_INSTALL_DIR }};%PYTHONPATH%
          python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py

      - name: Model Optimizer UT
        if: fromJSON(needs.smart_ci.outputs.affected_components).MO.test
        shell: cmd
        run: |
          python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/mo/unit_tests --ignore=${{ env.INSTALL_TEST_DIR }}/mo/unit_tests/mo/front/mxnet --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-ModelOptimizer.xml

      - name: Install Python Layer tests dependencies
        run: |
          # layer test requirements
          python3 -m pip install -r ${{ env.LAYER_TESTS_INSTALL_DIR }}/requirements.txt

      # Ticket - 115085
      - name: PyTorch Layer Tests
        if: ${{ 'false' }}
        shell: cmd
        run: |
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/pytorch_tests -n logical -m precommit --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-pytorch.xml
        env:
          TEST_DEVICE: CPU

      - name: ONNX Layer Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).ONNX_FE.test
        shell: cmd
        run: |
          :: requires 'unit_tests' from 'tools/mo'
          set PYTHONPATH=${{ env.INSTALL_TEST_DIR }}\mo;%PYTHONPATH%
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/onnx_tests -n logical -m "not launch_only_if_manually_specified and precommit" --junitxml=${INSTALL_TEST_DIR}/TEST-onnx.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow Lite Layer Tests - TFL FE
        if: fromJSON(needs.smart_ci.outputs.affected_components).TFL_FE.test
        shell: cmd
        run: |
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/tensorflow_lite_tests/ --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-tfl_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: Python ONNX operators tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).Python_API.test ||
            fromJSON(needs.smart_ci.outputs.affected_components).ONNX_FE.test
        shell: cmd
        run: |
          :: Skip test_onnx/test_zoo_models and test_onnx/test_backend due to long execution time - ONNX Model Zoo tests are run separately
          python3 -m pytest ${{ env.INSTALL_TEST_DIR }}/onnx -k "not cuda" ^
          --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-onnx_frontend.xml ^
          --ignore=${{ env.INSTALL_TEST_DIR }}/onnx/test_python/test_zoo_models.py

      - name: MO Python API Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).MO.test
        shell: cmd
        run: |
          :: Used for 'test_utils' installed in '<test_package>\python\openvino\test_utils'
          set PYTHONPATH=${{ env.INSTALL_TEST_DIR }}\python\openvino\test_utils;${{ env.INSTALL_TEST_DIR }}\python;%PYTHONPATH%

          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/mo_python_api_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_mo_convert.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: OVC Python API Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).MO.test
        shell: cmd
        run: |
          :: Used for 'test_utils' installed in '<test_package>\python\openvino\test_utils'
          set PYTHONPATH=${{ env.INSTALL_TEST_DIR }}\python\openvino\test_utils;${{ env.INSTALL_TEST_DIR }}\python;%PYTHONPATH%

          :: Skip test ticket: 126319
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/ovc_python_api_tests -k "not test_ovc_tool_non_existng_output_dir" --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_ovc_convert.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: Python Frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).PyTorch_FE.test ||
            fromJSON(needs.smart_ci.outputs.affected_components).PDPD_FE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          python3 -m pytest ${{ env.LAYER_TESTS_INSTALL_DIR }}/py_frontend_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-test_py_fontend.xml

      - name: OVC unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).MO.test
        shell: cmd
        run: python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/ovc/unit_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-OpenVinoConversion.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: ${{ !cancelled() }}
        with:
          name: test-results-python
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  TensorFlow_Layer_Tests:
    name: TensorFlow Layer Tests
    needs: [ Build, Smart_CI, Openvino_tokenizers ]
    uses: ./.github/workflows/job_tensorflow_layer_tests.yml
    with:
      runner: 'aks-win-8-cores-16gb'
      shell: pwsh
      affected-components: ${{ needs.smart_ci.outputs.affected_components }}

  CXX_Unit_Tests:
    name: C++ unit tests
    needs: [ Build, Smart_CI ]
    timeout-minutes: 25
    defaults:
      run:
        shell: pwsh
    runs-on: aks-win-4-cores-8gb
    env:
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"

    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: OpenVINO Core unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).Core.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NGraphUT.xml

      - name: OpenVINO Inference functional tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).inference.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_functional_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceFunc.xml

      - name: OpenVINO Inference unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).inference.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_inference_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).LP_transformations.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_lp_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).Core.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_conditional_compilation_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).IR_FE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

      - name: PaddlePaddle frontend tests # Disabled because of CVS-95904
        if: ${{ 'false' }}
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-PaddleTests.xml

      - name: ONNX frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).ONNX_FE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

      - name: TensorFlow Common frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).TF_FE.test ||
            fromJSON(needs.smart_ci.outputs.affected_components).TFL_FE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_common_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).TF_FE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).TFL_FE.test
        run: |
          # Skip ticket: 126320
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 --gtest_filter=-*test_decode_convert_equal_convert*:*test_convert_partially_equal_convert* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations func tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).transformations.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_transformations_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Transformations.xml

      - name: Common test utils tests
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_util_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-commonUtilsTests.xml

      - name: Snippets func tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).CPU.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_snippets_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-SnippetsFuncTests.xml

      - name: CPU plugin unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).CPU.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-CPUUnitTests.xml

      - name: ov_subgraphs_dumper_tests tests
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_subgraphs_dumper_tests --gtest_print_time=1 --device=TEMPLATE --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-SubgraphsDumperTests.xml

      - name: Template OpImpl tests
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_op_conformance_tests --gtest_print_time=1 --gtest_filter="*OpImpl*" --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateOpImplTests.xml

      - name: AUTO unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).AUTO.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_unit_tests.xml

      - name: AUTO func Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).AUTO.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_func_tests.xml

      - name: Template plugin func tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).TEMPLATE.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-TemplateFuncTests.xml

      - name: OpenVINO C API tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).C_API.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OpenVINOCAPITests.xml

      - name: AutoBatch unit tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).AUTO_BATCH.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_unit_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_unit_tests.xml

      - name: AutoBatch func tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).AUTO_BATCH.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_auto_batch_func_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_auto_batch_func_tests.xml --gtest_filter="*smoke*"

      - name: Proxy Plugin func tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).PROXY.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVProxyTests.xml

      - name: Hetero Unit Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).HETERO.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_hetero_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroUnitTests.xml

      - name: Hetero Func Tests
        if: fromJSON(needs.smart_ci.outputs.affected_components).HETERO.test
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          ${{ env.INSTALL_TEST_DIR }}/ov_hetero_func_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroFuncTests.xml --gtest_filter="*smoke*"

      - name: Upload Test Results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: ${{ !cancelled() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  CPU_Functional_Tests:
    name: CPU functional tests
    needs: [ Build, Smart_CI ]
    timeout-minutes: 70
    defaults:
      run:
        shell: pwsh
    runs-on: aks-win-8-cores-16gb
    env:
      OPENVINO_REPO: "${{ github.workspace }}\\openvino"
      INSTALL_DIR: "${{ github.workspace }}\\install"
      INSTALL_TEST_DIR: "${{ github.workspace }}\\install\\tests"
      PARALLEL_TEST_SCRIPT: "${{ github.workspace }}\\install\\tests\\functional_test_utils\\layer_tests_summary\\run_parallel.py"
      PARALLEL_TEST_CACHE: "${{ github.workspace }}\\install\\tests\\test_cache.lst"
    if: fromJSON(needs.smart_ci.outputs.affected_components).CPU.test
    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      - name: Fetch setup_python action
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'openvino'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./openvino/.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          should-setup-pip-paths: 'false'
          self-hosted-runner: 'true'

      - name: Install python dependencies
        run: python3 -m pip install -r ${{ github.workspace }}\install\tests\functional_test_utils\layer_tests_summary\requirements.txt

      - name: Restore tests execution time
        uses: actions/cache/restore@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        with:
          path: ${{ env.PARALLEL_TEST_CACHE }}
          key: ${{ runner.os }}-tests-functional-cpu-stamp-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-tests-functional-cpu-stamp

      - name: Intel CPU plugin func tests (parallel)
        run: |
          . "${{ env.INSTALL_DIR }}/setupvars.ps1"
          python3 ${{ env.PARALLEL_TEST_SCRIPT }} -e ${{ env.INSTALL_TEST_DIR }}/ov_cpu_func_tests.exe -c ${{ env.PARALLEL_TEST_CACHE }} -w ${{ env.INSTALL_TEST_DIR }} -s suite -- --gtest_filter=*smoke*
        timeout-minutes: 60

      - name: Save tests execution time
        uses: actions/cache/save@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9 # v4.0.2
        if: github.ref_name == 'master'
        with:
          path: ${{ env.PARALLEL_TEST_CACHE }}
          key: ${{ runner.os }}-tests-functional-cpu-stamp-${{ github.sha }}

      - name: Upload Test Results
        uses: actions/upload-artifact@0b2256b8c012f0828dc542b3febcab082c67f72b # v4.3.4
        if: ${{ !cancelled() }}
        with:
          name: test-results-functional-cpu
          path: |
            ${{ env.INSTALL_TEST_DIR }}/temp/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/failed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/crashed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/hanged/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/interapted/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/hash_table.csv
            ${{ env.PARALLEL_TEST_CACHE }}
          if-no-files-found: 'error'

  Overall_Status:
    name: ci/gha_overall_status_windows
    needs: [ Smart_CI, Build, Samples, CXX_Unit_Tests, Python_Unit_Tests, CPU_Functional_Tests, Openvino_tokenizers, TensorFlow_Layer_Tests ]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Check status of all jobs
        if: >-
          ${{
            contains(needs.*.result, 'failure') ||
            contains(needs.*.result, 'cancelled')
          }}
        run: exit 1
